@page "/authors"
@using Microsoft.AspNetCore.Authorization
@using BlazorServer.Components.Pages.AdminPanel.Buttons
@rendermode InteractiveServer
@attribute [Authorize(Policy = "AdminOnly")]
@inject IEntityService<Author> AuthorService
@inject NavigationManager NavigationManager

<div class="container mt-2">
    <div class="row mb-3">
        <div class="col-12">
            <GenericCreateButton TEntity="Author" UrlPattern="edit-author"/>
        </div>
        <div class="col-12">
            <h3 class="mt-3">Authors</h3>
        </div>
    </div>

    <!-- Existing author display logic -->
    <div class="row">
        @if (authors == null)
        {
            <div class="col-12">
                <span>Loading...</span>
            </div>
        }
        else if (authors.Count == 0)
        {
            <div class="col-12">
                <span>No authors found.</span>
            </div>
        }
        else
        {
            @foreach (var author in pagedAuthors)
            {
                <div class="col-md-4 col-sm-10 offset-md-0 offset-sm-1 mb-4 d-flex align-items-stretch">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">@author.Name</h5>
                            <p class="card-text">
                                <strong>Nationality:</strong> @author.Nationality<br />
                                <strong>Bio:</strong> @author.Bio
                            </p>
                            <div class="d-flex justify-content-start">
                                <GenericEditButton TEntity="Author" Id="@author.AuthorID" EditUrlPattern="/edit-author/{0}" />
                                <span class="m-1"></span>
                                <GenericDeleteButton TEntity="Author" Id="@author.AuthorID" />
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Pagination component -->
    <div class="row justify-content-center">
        <div class="col-md-6">
            <Pagination TotalPages="TotalPages" CurrentPage="CurrentPage" PageChanged="OnPageChanged" />
        </div>
    </div>
</div>

@code {
    List<Author>? authors = null;
    List<Author>? pagedAuthors = null;
    public int CurrentPage { get; set; } = 1;
    private int pageSize = 3; // Adjust as needed
    public int TotalPages { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        authors = await AuthorService.GetAll();
        await LoadAuthors();
    }

    private async Task LoadAuthors()
    {
        TotalPages = (int)Math.Ceiling((decimal)authors.Count / pageSize);
        int startIndex = (CurrentPage - 1) * pageSize;
        pagedAuthors = authors.Skip(startIndex).Take(pageSize).ToList();
    }

    private async void OnPageChanged(int page)
    {
        CurrentPage = page;
        await LoadAuthors();
    }
}

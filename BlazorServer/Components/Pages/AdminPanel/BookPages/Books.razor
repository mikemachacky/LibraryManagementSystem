@page "/books"
@using Microsoft.AspNetCore.Authorization
@using BlazorServer.Components.Pages.AdminPanel.Buttons
@rendermode InteractiveServer
@attribute [Authorize(Policy = "AdminOnly")]
@inject IEntityService<Book> BookService
@inject NavigationManager NavigationManager

<div class="container mt-2">
    <div class="row mb-3">
        <div class="col-12">
            <CreateBookButton />
        </div>
        <div class="col-12">
            <h3 class="mt-3">Books</h3>
        </div>
    </div>

    <!-- Your existing book display logic -->

    <div class="row">
        @if (books == null)
        {
            <div class="col-12">
                <span>Loading...</span>
            </div>
        }
        else if (books.Count == 0)
        {
            <div class="col-12">
                <span>No books found.</span>
            </div>
        }
        else
        {
            @foreach (var book in pagedBooks)
            {
                <div class="col-md-4 col-sm-10 offset-md-0 offset-sm-1 mb-4 d-flex align-items-stretch">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">@book.Title</h5>
                            <h6 class="card-subtitle mb-2">@book.Author.Name <strong class="card-subtitle mb-2 text-muted">Author ID:</strong> <span class="card-subtitle mb-2 text-muted">@book.AuthorID</span></h6>

                            <p class="card-text">
                                <strong>ISBN:</strong> @book.ISBN<br />
                                <strong>@book.Genre.Name</strong> <strong class="text-muted">Genre ID:</strong> @book.GenreID<br />
                                <strong>@book.Publisher.Name</strong> <strong class="text-muted">Publisher ID:</strong> @book.PublisherID<br />
                                <strong>Publish Date:</strong> @book.PublishDate.ToShortDateString()<br />
                                <strong>Quantity Available:</strong> @book.QuantityAvailable<br />
                                <strong>Description:</strong> @book.Description
                            </p>
                            <div class="d-flex justify-content-start">
                               <GenericEditButton TEntity="Book" Id="@book.BookID" EditUrlPattern="/edit-book/{0}" />
                                <span class="m-1"></span>
                               <GenericDeleteButton TEntity="Book" Id="@book.BookID" />
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Pagination component -->
    <div class="row justify-content-center">
        <div class="col-md-6">
            <Pagination TotalPages="TotalPages" CurrentPage="CurrentPage" PageChanged="OnPageChanged" />
        </div>
    </div>
</div>

@code {
    List<Book>? books = null;
    List<Book>? pagedBooks = null;
    public int CurrentPage { get; set; } = 1;
    private int pageSize = 3;
    public int TotalPages { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        books = await BookService.GetAll();
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        TotalPages = (int)Math.Ceiling((decimal)books.Count / pageSize);
        int startIndex = (CurrentPage - 1) * pageSize;
        pagedBooks = books.Skip(startIndex).Take(pageSize).ToList();
    }

    private async void OnPageChanged(int page)
    {
        CurrentPage = page;
        await LoadBooks();
    }
}

@page "/transactions"
@using BlazorServer.Data
@using BlazorServer.Model
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using BlazorServer.Components.Pages.AdminPanel.Buttons
@attribute [Authorize(Policy = "AdminOnly")]
@inject IEntityService<Transaction> TransactionService
@inject UserManager<ApplicationUser> UserManager
@inject IJSRuntime JSRuntime

<div class="container mt-2">
    <div class="row mb-3">
       
        <div class="col-12">
            <h3 class="mt-3">Transactions</h3>
        </div>
    </div>
    @if (transactions == null)
    {
        <div class="row">
            <div class="col-12">
                <span>Loading...</span>
            </div>
        </div>
    }
    else if (transactions.Count == 0)
    {
        <div class="row">
            <div class="col-12">
                <span>No transactions found.</span>
            </div>
        </div>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Transaction ID</th>
                    <th>Book Title</th>
                    <th>User Email</th>
                    <th>Due Date</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in transactions)
                {
                    var user = users.FirstOrDefault(u => u.Id == transaction.UserID.ToString());
                    <tr>
                        <td>@transaction.TransactionID</td>
                        <td>@transaction.Book.Title</td>
                        <td>@user?.Email</td> <!-- Display user email instead of ID -->
                        <td>@transaction.DueDate.ToShortDateString()</td>
                        <td>
                            <span class="@GetStatusBadgeClass(transaction.Status)">
                                @transaction.Status
                            </span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    public List<Transaction> transactions = new();
    private List<ApplicationUser> users = new();

    protected override async Task OnInitializedAsync()
    {
        transactions = await TransactionService.GetAll();
        users = await UserManager.Users.ToListAsync();
       
    }

  
   
    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "badge bg-warning text-dark",
            "Completed" => "badge bg-success",
            "Overdue" => "badge bg-danger",
            _ => "badge bg-secondary"
        };
    }
}
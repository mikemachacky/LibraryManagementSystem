@page "/usermanagement"
@using BlazorServer.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@rendermode InteractiveServer
@attribute [Authorize(Policy = "AdminOnly")]

<div class="container mt-4">
<h3>User Management</h3>

@if (Users == null || Roles == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Current Role</th>
                <th>Change Role</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Users)
            {
                var currentRole = UserRoles[user.Id];
                <tr>
                    <td>@user.Email</td>
                    <td>@currentRole</td>
                    <td>
                        <select @onchange="async (e) => await ChangeUserRole(user.Id, e.Value.ToString())">
                            @foreach (var role in Roles)
                            {
                                <option value="@role.Name" selected="@role.Name == currentRole">@role.Name</option>
                            }
                        </select>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
</div>
@code {
    public List<ApplicationUser> Users { get; set; } = new();
    public List<IdentityRole> Roles { get; set; } = new();
    public Dictionary<string, string> UserRoles { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Roles = await RoleManager.Roles.ToListAsync();
        Users = await UserManager.Users.ToListAsync();

        foreach (var user in Users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            UserRoles[user.Id] = roles.FirstOrDefault();
        }
    }

    private async Task ChangeUserRole(string userId, string newRole)
    {
        var user = await UserManager.FindByIdAsync(userId);
        if (user != null)
        {
            var currentRoles = await UserManager.GetRolesAsync(user);
            var removeRolesResult = await UserManager.RemoveFromRolesAsync(user, currentRoles);
            if (removeRolesResult.Succeeded)
            {
                var addRoleResult = await UserManager.AddToRoleAsync(user, newRole);
                if (addRoleResult.Succeeded)
                {
                    UserRoles[userId] = newRole;
                }
            }
        }
    }
}

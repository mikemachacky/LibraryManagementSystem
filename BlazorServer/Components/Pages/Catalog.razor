@page "/catalog"
@using BlazorServer.Model
@rendermode InteractiveServer
@inject IEntityService<Book> BookService

<h3>Books Catalog</h3>

<div class="row">
    @if (pagedBooks != null && pagedBooks.Any())
    {
        @foreach (var book in pagedBooks)
        {
            <div class="col-md-4 col-sm-10 offset-md-0 offset-sm-1 mb-4">
                <div class="card" style="height:50vh;">
                    <div class="card-body">
                        <h5 class="card-title">@book.Title</h5>
                        <h6 class="card-subtitle mb-2">@book.Author.Name</h6>

                        <p class="card-text">
                            <strong>ISBN:</strong> @book.ISBN<br />
                            <strong>@book.Genre.Name</strong> <br />
                            <strong>@book.Publisher.Name</strong> <br />
                            <strong>Publish Date:</strong> @book.PublishDate.ToShortDateString()<br />
                            <strong>Quantity Available:</strong> @book.QuantityAvailable<br />
                            <strong>Description:</strong> @book.Description
                        </p>
                         <a class="btn btn-primary" href="/bookdetails/@book.BookID">View Details</a>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p>No books found.</p>
    }
</div>
<div class="row justify-content-center position-sticky">
    <div class="col-md-6 offset-3">
        <Pagination TotalPages="TotalPages" CurrentPage="CurrentPage" PageChanged="OnPageChanged" />
    </div>
</div>

@code {
    private string searchTerm;
    private List<Book> pagedBooks;
    public int CurrentPage{ get; set; } = 1;
    private int pageSize = 3;
    public int TotalPages { get; set; } = 0;
    private List<Book> books;

    private async Task LoadBooks()
    {
        TotalPages = (int)Math.Ceiling((decimal)books.Count / pageSize);
        int startIndex = (CurrentPage - 1) * pageSize;
        pagedBooks = books.Skip(startIndex).Take(pageSize).ToList();
    }

    private async void OnPageChanged(int page)
    {
        CurrentPage = page;
        await LoadBooks();
    }
 
    protected override async Task OnInitializedAsync()
    {
        books = await BookService.GetAll();
        await LoadBooks();

    }
}
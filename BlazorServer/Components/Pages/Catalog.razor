@page "/catalog"
@using BlazorServer.Model
@using BlazorServer.Components.Pages.AdminPanel.Buttons

@rendermode InteractiveServer
@inject IEntityService<Book> BookService
@inject NavigationManager NavigationManager

<div class="container mt-2">
    <div class="row mb-3">
        <div class="col-12">
            <h3 class="mt-3">Catalog</h3>
        </div>
    </div>

    <!-- Search bar -->
    <div class="row mb-3">
        <div class="col-12">
            <input type="text" @bind-value="SearchTerm" placeholder="Search..." class="form-control" @oninput="(async (e) => await HandleSearch(e))" />
        </div>
    </div>


    <div class="row">
        @if (pagedBooks == null)
        {
            <div class="col-12">
                <span>Loading...</span>
            </div>
        }
        else if (pagedBooks.Count == 0)
        {
            <div class="col-12">
                <span>No books found.</span>
            </div>
        }
        else
        {
            @foreach (var book in pagedBooks)
            {
                <div class="col-md-4 col-sm-10 offset-md-0 offset-sm-1 mb-4 d-flex align-items-stretch">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">@book.Title</h5>
                            <h6 class="card-subtitle mb-2">@book.Author.Name</h6>
                            <p class="card-text">
                                <strong>ISBN:</strong> @book.ISBN<br />
                                <strong>@book.Genre.Name</strong><br />
                                <strong>@book.Publisher.Name</strong><br />
                                <strong>Publish Date:</strong> @book.PublishDate.ToShortDateString()<br />
                                <strong>Quantity Available:</strong> @book.QuantityAvailable<br />
                                <strong>Description:</strong> @book.Description
                                <button class="btn btn-primary" @onclick="()=>RedirectToBookDetails(book.BookID)">See more</button>
                            </p>
                           
                        
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Pagination -->
    <div class="row justify-content-center">
        <div class="col-md-6">
            <Pagination TotalPages="TotalPages" CurrentPage="CurrentPage" PageChanged="OnPageChanged" />
        </div>
    </div>
</div>

@code {
    private List<Book> books;
    private List<Book> pagedBooks; 
    [Parameter]
    public int Id { get; set; }
    public string SearchTerm= null;
    public int CurrentPage { get; set; } = 1;
    private int pageSize = 3;
    public int TotalPages { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        books = await BookService.GetAll();
        await LoadBooks();

    }

    private async Task LoadBooks()
    {
        TotalPages = (int)Math.Ceiling((decimal)books.Count / pageSize);
        int startIndex = (CurrentPage - 1) * pageSize;
        pagedBooks = books.Skip(startIndex).Take(pageSize).ToList();
    }

    private async void OnPageChanged(int page)
    {
        CurrentPage = page;
        await LoadBooks();
    }
    private async Task HandleSearch(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString();
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            books = await BookService.GetAll();
        }
        else
        {
            books = books.Where(b => b.Title.ToLower().Contains(SearchTerm.ToLower())).ToList();
        }
        await LoadBooks();
    }
    private void RedirectToBookDetails(int Id)
    {
        NavigationManager.NavigateTo($"/bookdetails/{Id}");
    }
}

@page "/myborrowings"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@rendermode InteractiveServer
@attribute [Authorize]
@inject IEntityService<Transaction> TransactionService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container mt-2">
    <div class="row mb-3">
        <div class="col-12">
            <h3 class="mt-3">My Borrowings</h3>
        </div>
    </div>

    @if (transactions == null)
    {
        <div class="row">
            <div class="col-12">
                <span>Loading...</span>
            </div>
        </div>
    }
    else if (transactions.Count == 0)
    {
        <div class="row">
            <div class="col-12">
                <span>No borrowings found.</span>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var transaction in transactions)
            {
                <div class="col-12 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@transaction.Book.Title</h5>
                            <h6 class="card-subtitle mb-2 text-muted">Borrowed on: @transaction.TransactionDate.ToShortDateString()</h6>
                            <p class="card-text">
                                <span class="@GetStatusBadgeClass(transaction.Status)">
                                    @transaction.Status
                                </span>
                                <strong>Due Date:</strong> @transaction.DueDate.ToShortDateString()<br />
                                @if (transaction.Status == "Overdue")
                                {
                                    <strong class="text-danger">Overdue! Please return immediately.</strong>
                                }
                            </p>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>
@code {
    private List<Transaction> transactions;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
            if (userIdClaim != null)
            {
                var userId = userIdClaim.Value;
                transactions = await TransactionService.GetByUserId(userId);
            }
            else
            {
                // Obsługa błędu braku identyfikatora użytkownika 
            }
        }
        else
        {
            // Obsługa braku uwierzytelnionego użytkownika
        }

    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "badge bg-warning text-dark",
            "Completed" => "badge bg-success",
            "Overdue" => "badge bg-danger",
            _ => "badge bg-secondary"
        };
    }
}